
def create_editor(container_id: str,
                  toolbar_container_id: str = None,
                  store_id: str = None,
                  placeholder: str = '请输入...',
                  readOnly: bool = False,
                  defaultContent: str = '') -> str:

    if readOnly:

        return '''
const {{ i18nChangeLanguage, createEditor, createToolbar }} = window.wangEditor;

// 切换至中文
i18nChangeLanguage('zh-CN')

const editorConfig = {{
    placeholder: '{placeholder}',
    readOnly: true
}}

const editor = createEditor({{
    selector: '#{container_id}',
    html: '{defaultContent}',
    config: editorConfig,
    mode: 'default'
}})
'''.format(
            **dict(
                container_id=container_id,
                placeholder=placeholder,
                defaultContent=defaultContent
            )
        )

    return '''
const {{ i18nChangeLanguage, createEditor, createToolbar }} = window.wangEditor;

// 切换至中文
i18nChangeLanguage('zh-CN')

const editorConfig = {{
    placeholder: '{placeholder}',
    onChange(editor) {{
      const html = editor.getHtml()
      sessionStorage.setItem('{store_id}', JSON.stringify({{html: html}}))
    }}
}}

const editor = createEditor({{
    selector: '#{container_id}',
    html: '{defaultContent}',
    config: editorConfig,
    mode: 'default'
}})

const toolbarConfig = {{}}

const toolbar = createToolbar({{
    editor,
    selector: '#{toolbar_container_id}',
    config: toolbarConfig,
    mode: 'default'
}})
'''.format(
        **dict(
            container_id=container_id,
            toolbar_container_id=toolbar_container_id,
            store_id=store_id,
            placeholder=placeholder,
            defaultContent=defaultContent
        )
    )




                                    # 用于渲染富文本编辑器
                                    html.Div(
                                        [
                                            html.Div(
                                                id='toolbar-container',
                                                style={
                                                    'borderBottom': '1px solid #ccc'
                                                }
                                            ),
                                            html.Div(
                                                id='editor-container',
                                                style={
                                                    'height': 600
                                                }
                                            ),
                                            fuc.FefferyExecuteJs(
                                                jsString=editor.create_editor(
                                                    container_id='editor-container',
                                                    toolbar_container_id='toolbar-container',
                                                    store_id='written-content',
                                                    defaultContent=match_note[0]['note_content']
                                                )
                                            ),
                                            # 监听富文本编辑器内容并取回
                                            fuc.FefferySessionStorage(
                                                id='written-content'
                                            )
                                        ],
                                        id='editor-wrapper',
                                        style={
                                            'border': '1px solid #ccc',
                                            'marginBottom': 15
                                        }
                                    )


import dash
from dash import html
import feffery_antd_components as fac
from feffery_dash_utils.style_utils import style

app = dash.Dash(__name__)

app.layout = html.Div(
    [
        fac.AntdSpace(
            [
                fac.AntdConfigProvider(
                    fac.AntdCheckableTag(
                        checkedContent="已选中", unCheckedContent="未选中"
                    ),
                    token={"colorPrimary": color},
                )
                for color in ["#ff4d4f", "#262626"]
            ]
        )
    ],
    style=style(padding=50),
)

if __name__ == "__main__":
    app.run(debug=True)



var chartDom = document.getElementById('spc-chart');
var myChart = echarts.init(chartDom);

var option = {
    title: {
        text: 'Statistical Process Control Chart',
        left: 'center'
    },
    tooltip: {
        trigger: 'axis'
    },
    xAxis: {
        type: 'category',
        data: ['Jan-1', 'Jan-8', 'Jan-15', 'Jan-22', 'Jan-29', 'Feb-5', 'Feb-12', 'Feb-19', 'Feb-26', 'Mar-4', 'Mar-11', 'Mar-18', 'Mar-25']
    },
    yAxis: {
        type: 'value'
    },
    grid: {
        top: '15%',
        bottom: '15%',
        left: '10%',
        right: '10%'
    },
    series: [
        {
            name: 'Data Points',
            type: 'line',
            data: [12, 15, 10, 5, 18, 21, 14, 13, 22, 15, 12, 9, 10],
            markLine: {
                silent: true,
                data: [
                    { yAxis: 21.22 }, // Upper Specification Limit
                    { yAxis: 18.56 }, // Upper Control Limit
                    { yAxis: 13.26 }, // Mean
                    { yAxis: 10.61 }, // Lower Control Limit
                    { yAxis: 5.31 }   // Lower Specification Limit
                ],
                lineStyle: {
                    color: '#ccc',
                    type: 'dashed'
                }
            },
            markPoint: {
                data: [
                    { type: 'max', name: 'Max', itemStyle: { color: 'red' } },
                    { type: 'min', name: 'Min', itemStyle: { color: 'purple' } }
                ]
            },
            lineStyle: {
                width: 2
            },
            itemStyle: {
                color: function(params) {
                    // Add color logic for different zones
                    var value = params.value;
                    if (value > 18.56 || value < 10.61) {
                        return 'red'; // Out of control
                    } else if (value > 13.26) {
                        return 'green'; // Above average
                    } else {
                        return 'blue'; // Below average
                    }
                }
            }
        }
    ]
};

myChart.setOption(option);
